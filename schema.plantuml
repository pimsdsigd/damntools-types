@startuml


package core {
    interface List<T>{
        + stream(): Stream
    }
    interface Stream<T> {
        + collect<R>(c: (items: Array<T>) => R): R
    }
    interface Dict<T> {
    }
}

package list {
    class ArrayList<T> {
        + stream(): ListStream
    }
    class StaticArrayList {
        + stream(): ListStream
    }
    class ListStream<T> {
        + collect<R>(c: (items: Array<T>) => R): R
    }
}

package dict {
    class KV<T> {
    }
}

package optional {
    class Optional<T>
}

package enum {
    class Enum<T>
}

package utils {

    abstract Lists {
        collector(array: Array): List
    }

    abstract Streams {
        from(array: Array): Stream
    }
}


List <|-- ArrayList
ArrayList <|-- StaticArrayList
Stream <|-- ListStream
Dict <|-- KV

@enduml